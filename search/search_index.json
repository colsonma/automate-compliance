{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to WPS317-R - Security in the cloud means more than you think For public sector customers, ensuring compliance and security is vital. AWS provides these organizations with a broad set of cloud-based services to build world-class solutions. In this session, we go over native logging tools in AWS, such as AWS CloudTrail, Amazon CloudWatch Alarms, Amazon CloudWatch Logs, and Amazon GuardDuty. We also cover automated remediation of compliance events, alerting tools, and other methods of implementing compliance. Summary of Session In this workshop, we're going to explore using CloudWatch Events, CloudTrail, and GuardDuty to help assure compliance in a given account. Each area will demonstrate one or more services, that tie back to specific compliance controls. The examples provided are to show how we can map those high level requirements to features native to AWS.","title":"Welcome to WPS317-R - Security in the cloud means more than you think"},{"location":"#welcome-to-wps317-r-security-in-the-cloud-means-more-than-you-think","text":"For public sector customers, ensuring compliance and security is vital. AWS provides these organizations with a broad set of cloud-based services to build world-class solutions. In this session, we go over native logging tools in AWS, such as AWS CloudTrail, Amazon CloudWatch Alarms, Amazon CloudWatch Logs, and Amazon GuardDuty. We also cover automated remediation of compliance events, alerting tools, and other methods of implementing compliance.","title":"Welcome to WPS317-R - Security in the cloud means more than you think"},{"location":"#summary-of-session","text":"In this workshop, we're going to explore using CloudWatch Events, CloudTrail, and GuardDuty to help assure compliance in a given account. Each area will demonstrate one or more services, that tie back to specific compliance controls. The examples provided are to show how we can map those high level requirements to features native to AWS.","title":"Summary of Session"},{"location":"scenario1/","text":"Scenario 1 - No Internet Gateways! One item public sector customers must control very tightly is the network path their traffic takes to and from the cloud. In DoD orgs, this includes the Cloud Access Point, or in the Federal Civilian space this may include a Trusted Internet Connection point. Other states/government agencies, or educational institutions may have similar requirements depending on thier compliance standards. This lab will help show you how to detect the creation of an internet gateway, and more importantly the attachment of it to a VPC. While we don't necessarily recommend automatically deleting something a user creates, this shows the ability we have to do just that in an automated fashion. A couple of examples of controls that may require this kind of assurance include CIS 4.4 and NIST AC-17(3). Pre-requisites You'll need: An AWS account that you can create CloudFormation stacks in, and be able to use Lambda with Make sure this account is one that creating/deleting resources like this won't trip any alarms! Ability to create IAM resources - we'll need a role that allows our function to use CloudWatch logs and detach the gateway Here's a high level graphic of what we're attempting to do: PLEASE BE SURE TO USE OREGON (US-WEST-2) FOR THIS LAB! You can double check this by looking in the upper right hand corner for the region selection dropdown. Deploy the Lambda Function First, we will need to deploy the Lambda function that deletes the internet gateway attachment. The code for this is a proof of concept, and does not represent a production level function. However, it does perform the task. The CloudFormation script will push the function below: import json import boto3 def lambda_handler(event, context): vpc_id = event['detail']['requestParameters']['vpcId'] igw_id = event['detail']['requestParameters']['internetGatewayId'] ec2 = boto3.client('ec2') ret = ec2.detach_internet_gateway( DryRun = True, InternetGatewayId = igw_id, VpcId = vpc_id ) return { 'statusCode': 200, 'body': ret } Note the DryRun = True statement inside the detach_internet_gateway function call. This is telling boto (the Python library that interacts with AWS APIs) to not actually delete the attachment, but rather validate that it can. You can change this to False , and the function will actually delete the attachment. We will quickly install the Lambda function by creating a CloudFormation stack. Launch the AWS CloudFormation Console. Click Create Stack Specify Amazon S3 as the location for the CloudFormation template, then click next. (https://reinforce2019-grc333-session.s3-us-west-2.amazonaws.com/lambda_vpc_delete.yaml) Provide a Stack name, and accept the default function name, or modify it to your liking. Click next. Add any tags you like, or accept all defaults, and click next. Review all the details on the final page, then ensure you check the box that says \"I acknowledge that AWS CloudFormation might create IAM resources with custom names.\" This ensures you are allowing CloudFormation to create the necessary IAM role needed to execute, log output, and perform the detaching of the IGW. At this point, you can choose to create the stack, or if you are not comfortable, feel free to skip it. There will be parts of the lab that will not function, but you can still explore each step regardless of having the function installed. Again, the default is to execute the detach in DryRun mode, so you will not have any destructive actions taken unless you modify that. Create CloudTrail Next we need to ensure we have a CloudTrail created to log the events happening inside our account. AWS CloudTrail is a service that enables governance, compliance, operational auditing, and risk auditing of your AWS account. With CloudTrail, you can log, continuously monitor, and retain account activity related to actions across your AWS infrastructure. CloudTrail provides event history of your AWS account activity, including actions taken through the AWS Management Console, AWS SDKs, command line tools, and other AWS services. This event history simplifies security analysis, resource change tracking, and troubleshooting. You can read more about CloudTrail here . Launch the CloudTrail console, and click \"View Trails\", followed by \"Create Trail\". If you already have one, ignore it and create a new Trail. We'll use that new trail to feed events into CloudWatch. We'll want to specify a trail name to ensure we know what we created here. Select yes for \"Apply trail to all regions\". For this lab, we'll skip the Data Events section. However, this is a powerful tool to help audit S3 and Lambda invocations and is worth further exploration in the future. For a storage location, select an existing bucket you have, or have the console create a new one for you. Be sure to click the advanced tab, and select the following: Bucket name: something unique if you're using a new bucket If you want this trail to be unique in a shared bucket, you can have CloudTrail prefix the files to identify them You can select KMS encryption to protect the data in these logs (this is required by NIST and CIS Benchmark) You can specify a key for this trail, or use an existing KMS key Logfile validation will create a digest of all logs with hashes of each in it. This will help you validate provenance of each logfile to determine if it was tampered with If you want a notification for each file to be sent with SNS (to trigger an ingest task in a SIEM or other tool) you can choose yes. Once you're happy with the configuration, click \"Create\". Configure Cloudwatch Logs for your new CloudTrail Once we've created our CloudTrail, we need to configure integration with CloudWatch Logs. This ensures we can create things like CloudWatch Events that will fire when a given action is seen, or for more advanced/long term retention, as well as search capability. From the CloudTrail console, find your newly created Trail, and click on its name. Scroll down until you see CloudWatch Logs, and click Configure. Specify the name of the Log Group you'd like your CloudTrail activity to be kept in by CloudWatch Logs. Click Continue. In order for CloudTrail to deliver logfiles to CloudWatch, you must create a new role for CloudTrail so it has permission to write the logs. Click View Details to see the IAM role that is proposed for creation, then select Allow if you are okay with it. Once you've clicked allow, the CloudTrail console will validate the role, create the new log group, and begin delivering logs. There may be a delay in the delivery of logs, but all events will now go to CloudWatch logs. You will see that configuration is successful similar to the screenshot below. Configure CloudWatch Events Once our CloudTrail is built, and we have it sending logs to CloudWatch, we need to configure an event to detect our Internet Gateway attach action. Go to the CloudWatch console, and select Logs. Once there, look for the Log Group we specified in the CloudTrail created earlier. Click on the Log Group name. This will open the list of log streams that contain events being sent to CloudTrail. Click on a log stream in the list. Once in the stream, you will see the events that have been streamed in. You can click on one of the events to see its detail. The event we are looking for is the AttachInternetGateway action. This shows us that someone has created a way to allow routing of traffic out from a VPC. Since we want to control this traffic (CIS 4.4, NIST AC-17(3)), we want to in this case react by removing the attachment automatically. In the screenshot above, you can see the eventName called AttachInternetGateway . This is the action we want to capture. In order to do so, we need to create a CloudWatch Event. When CloudWatch sees this event pop up in a log sent to it by CloudTrail, it will execute an action that we specify. In this case, we will execute our Lambda function that will detach the gateway. As indicated above, the function is set to DryRun = True , so we will not actually perform the delete. To configure the CloudWatch event, click on Events in the left hand column in the CloudWatch console.. Once you click Events, click Get Started. This will launch the CloudWatch Event dialog. We want to ensure that \"Build event pattern to match events by service\" is selected. Drop down the services box, and select EC2. Event Type should be \"AWS API Call via CloudTrail\". We want to select Specific Operation(s), and in the boxes below put in AttachInternetGateway . In the Targets column, we will specify that this Event firing will send the log data to Lambda to feed our Detach function. Click Add Target, then ensure Lambda function is selected. Drop down the function box, and select the Lambda function we created earlier. Once you're happy with the configuration, click \"Configure details\" at the bottom of the screen. Let's recap what we've done so far. We've created a Python based Lambda function that will delete a specified Internet Gateway Attachment. We've created a CloudTrail that you can use to log API activity in your account, and configured sending it to CloudWatch Logs. We've configured a CloudWatch Events Rule that fires our Lambda function when it detects an AttachInternetGateway action. Testing our setup! Now it's time to test out this setup. To simulate this, we're going to deploy another CloudFormation Stack. This stack deploys the setup above, but here it is again for your reference: The CloudFormation template creates a VPC, and an Internet Gateway. It then attaches the Internet Gateway to the VPC. That's it. No subnets or any other constructs. It does specify 10.10.0.0/16 as the default CIDR. Please validate that as one you can use in your account. Open the CloudFormation Console, and deploy the following stack from S3: https://reinforce2019-grc333-session.s3-us-west-2.amazonaws.com/NewVPC-CFN.yaml Enter a stack name, and validate the CIDR block that is pre-populated. Also look at the VPC name and ensure you're happy with that. Click Next, add any tags or other changes you might want, then click Next again. Review the summary, and click Create stack if you're happy As the stack runs, feel free to watch it from the CloudFormation console. Note the time that it is finished creating. Once the stack is completed, we will have a few minutes while CloudTrail receives the logs and sends them to CloudWatch Logs. You can go to CloudWatch Logs, and search for the AttachInternetGateway event. You can also monitor the Lambda function logs for the invocation of the function. Open up the log stream that was created for you by Lambda (it'll be named after your function). Look at the events there. When the function runs, it will indicate that it has failed. This is expected: remember, we set the DryRun = True flag in the function. You will see however, that it would have run successfully had we not set that. If this event had run live, you could go and look at the VPC configuration, and notice that the Internet Gateway created by the CloudFormation VPC stack has been detached from the VPC. Summary Control of network traffic flow to many compliance frameworks. This is one example of a way you can use different AWS services to monitor that flow. In our next lab, we'll look at using drift detection in CloudFormation to monitor ports/protocols allowed to a given group of hosts. To clean up, please remember to do the following tasks: Remove the CloudFormation stacks we created - the Lambda function, and the new VPC. Be careful to only delete what we created Remove the CloudTrail we created as a part of this lab - be careful not to disturb any others you may have Remove the CloudWatch Events rule we created Remove the CloudWatch Logs groups created by Lambda and CloudTrail Remove the S3 bucket that was created by CloudTrail to store the logs from this trail This should remove all artifacts of this lab.","title":"Scenario 1 - No Internet Gateways"},{"location":"scenario1/#scenario-1-no-internet-gateways","text":"One item public sector customers must control very tightly is the network path their traffic takes to and from the cloud. In DoD orgs, this includes the Cloud Access Point, or in the Federal Civilian space this may include a Trusted Internet Connection point. Other states/government agencies, or educational institutions may have similar requirements depending on thier compliance standards. This lab will help show you how to detect the creation of an internet gateway, and more importantly the attachment of it to a VPC. While we don't necessarily recommend automatically deleting something a user creates, this shows the ability we have to do just that in an automated fashion. A couple of examples of controls that may require this kind of assurance include CIS 4.4 and NIST AC-17(3).","title":"Scenario 1 - No Internet Gateways!"},{"location":"scenario1/#pre-requisites","text":"You'll need: An AWS account that you can create CloudFormation stacks in, and be able to use Lambda with Make sure this account is one that creating/deleting resources like this won't trip any alarms! Ability to create IAM resources - we'll need a role that allows our function to use CloudWatch logs and detach the gateway Here's a high level graphic of what we're attempting to do: PLEASE BE SURE TO USE OREGON (US-WEST-2) FOR THIS LAB! You can double check this by looking in the upper right hand corner for the region selection dropdown.","title":"Pre-requisites"},{"location":"scenario1/#deploy-the-lambda-function","text":"First, we will need to deploy the Lambda function that deletes the internet gateway attachment. The code for this is a proof of concept, and does not represent a production level function. However, it does perform the task. The CloudFormation script will push the function below: import json import boto3 def lambda_handler(event, context): vpc_id = event['detail']['requestParameters']['vpcId'] igw_id = event['detail']['requestParameters']['internetGatewayId'] ec2 = boto3.client('ec2') ret = ec2.detach_internet_gateway( DryRun = True, InternetGatewayId = igw_id, VpcId = vpc_id ) return { 'statusCode': 200, 'body': ret } Note the DryRun = True statement inside the detach_internet_gateway function call. This is telling boto (the Python library that interacts with AWS APIs) to not actually delete the attachment, but rather validate that it can. You can change this to False , and the function will actually delete the attachment. We will quickly install the Lambda function by creating a CloudFormation stack. Launch the AWS CloudFormation Console. Click Create Stack Specify Amazon S3 as the location for the CloudFormation template, then click next. (https://reinforce2019-grc333-session.s3-us-west-2.amazonaws.com/lambda_vpc_delete.yaml) Provide a Stack name, and accept the default function name, or modify it to your liking. Click next. Add any tags you like, or accept all defaults, and click next. Review all the details on the final page, then ensure you check the box that says \"I acknowledge that AWS CloudFormation might create IAM resources with custom names.\" This ensures you are allowing CloudFormation to create the necessary IAM role needed to execute, log output, and perform the detaching of the IGW. At this point, you can choose to create the stack, or if you are not comfortable, feel free to skip it. There will be parts of the lab that will not function, but you can still explore each step regardless of having the function installed. Again, the default is to execute the detach in DryRun mode, so you will not have any destructive actions taken unless you modify that.","title":"Deploy the Lambda Function"},{"location":"scenario1/#create-cloudtrail","text":"Next we need to ensure we have a CloudTrail created to log the events happening inside our account. AWS CloudTrail is a service that enables governance, compliance, operational auditing, and risk auditing of your AWS account. With CloudTrail, you can log, continuously monitor, and retain account activity related to actions across your AWS infrastructure. CloudTrail provides event history of your AWS account activity, including actions taken through the AWS Management Console, AWS SDKs, command line tools, and other AWS services. This event history simplifies security analysis, resource change tracking, and troubleshooting. You can read more about CloudTrail here . Launch the CloudTrail console, and click \"View Trails\", followed by \"Create Trail\". If you already have one, ignore it and create a new Trail. We'll use that new trail to feed events into CloudWatch. We'll want to specify a trail name to ensure we know what we created here. Select yes for \"Apply trail to all regions\". For this lab, we'll skip the Data Events section. However, this is a powerful tool to help audit S3 and Lambda invocations and is worth further exploration in the future. For a storage location, select an existing bucket you have, or have the console create a new one for you. Be sure to click the advanced tab, and select the following: Bucket name: something unique if you're using a new bucket If you want this trail to be unique in a shared bucket, you can have CloudTrail prefix the files to identify them You can select KMS encryption to protect the data in these logs (this is required by NIST and CIS Benchmark) You can specify a key for this trail, or use an existing KMS key Logfile validation will create a digest of all logs with hashes of each in it. This will help you validate provenance of each logfile to determine if it was tampered with If you want a notification for each file to be sent with SNS (to trigger an ingest task in a SIEM or other tool) you can choose yes. Once you're happy with the configuration, click \"Create\".","title":"Create CloudTrail"},{"location":"scenario1/#configure-cloudwatch-logs-for-your-new-cloudtrail","text":"Once we've created our CloudTrail, we need to configure integration with CloudWatch Logs. This ensures we can create things like CloudWatch Events that will fire when a given action is seen, or for more advanced/long term retention, as well as search capability. From the CloudTrail console, find your newly created Trail, and click on its name. Scroll down until you see CloudWatch Logs, and click Configure. Specify the name of the Log Group you'd like your CloudTrail activity to be kept in by CloudWatch Logs. Click Continue. In order for CloudTrail to deliver logfiles to CloudWatch, you must create a new role for CloudTrail so it has permission to write the logs. Click View Details to see the IAM role that is proposed for creation, then select Allow if you are okay with it. Once you've clicked allow, the CloudTrail console will validate the role, create the new log group, and begin delivering logs. There may be a delay in the delivery of logs, but all events will now go to CloudWatch logs. You will see that configuration is successful similar to the screenshot below.","title":"Configure Cloudwatch Logs for your new CloudTrail"},{"location":"scenario1/#configure-cloudwatch-events","text":"Once our CloudTrail is built, and we have it sending logs to CloudWatch, we need to configure an event to detect our Internet Gateway attach action. Go to the CloudWatch console, and select Logs. Once there, look for the Log Group we specified in the CloudTrail created earlier. Click on the Log Group name. This will open the list of log streams that contain events being sent to CloudTrail. Click on a log stream in the list. Once in the stream, you will see the events that have been streamed in. You can click on one of the events to see its detail. The event we are looking for is the AttachInternetGateway action. This shows us that someone has created a way to allow routing of traffic out from a VPC. Since we want to control this traffic (CIS 4.4, NIST AC-17(3)), we want to in this case react by removing the attachment automatically. In the screenshot above, you can see the eventName called AttachInternetGateway . This is the action we want to capture. In order to do so, we need to create a CloudWatch Event. When CloudWatch sees this event pop up in a log sent to it by CloudTrail, it will execute an action that we specify. In this case, we will execute our Lambda function that will detach the gateway. As indicated above, the function is set to DryRun = True , so we will not actually perform the delete. To configure the CloudWatch event, click on Events in the left hand column in the CloudWatch console.. Once you click Events, click Get Started. This will launch the CloudWatch Event dialog. We want to ensure that \"Build event pattern to match events by service\" is selected. Drop down the services box, and select EC2. Event Type should be \"AWS API Call via CloudTrail\". We want to select Specific Operation(s), and in the boxes below put in AttachInternetGateway . In the Targets column, we will specify that this Event firing will send the log data to Lambda to feed our Detach function. Click Add Target, then ensure Lambda function is selected. Drop down the function box, and select the Lambda function we created earlier. Once you're happy with the configuration, click \"Configure details\" at the bottom of the screen. Let's recap what we've done so far. We've created a Python based Lambda function that will delete a specified Internet Gateway Attachment. We've created a CloudTrail that you can use to log API activity in your account, and configured sending it to CloudWatch Logs. We've configured a CloudWatch Events Rule that fires our Lambda function when it detects an AttachInternetGateway action.","title":"Configure CloudWatch Events"},{"location":"scenario1/#testing-our-setup","text":"Now it's time to test out this setup. To simulate this, we're going to deploy another CloudFormation Stack. This stack deploys the setup above, but here it is again for your reference: The CloudFormation template creates a VPC, and an Internet Gateway. It then attaches the Internet Gateway to the VPC. That's it. No subnets or any other constructs. It does specify 10.10.0.0/16 as the default CIDR. Please validate that as one you can use in your account. Open the CloudFormation Console, and deploy the following stack from S3: https://reinforce2019-grc333-session.s3-us-west-2.amazonaws.com/NewVPC-CFN.yaml Enter a stack name, and validate the CIDR block that is pre-populated. Also look at the VPC name and ensure you're happy with that. Click Next, add any tags or other changes you might want, then click Next again. Review the summary, and click Create stack if you're happy As the stack runs, feel free to watch it from the CloudFormation console. Note the time that it is finished creating. Once the stack is completed, we will have a few minutes while CloudTrail receives the logs and sends them to CloudWatch Logs. You can go to CloudWatch Logs, and search for the AttachInternetGateway event. You can also monitor the Lambda function logs for the invocation of the function. Open up the log stream that was created for you by Lambda (it'll be named after your function). Look at the events there. When the function runs, it will indicate that it has failed. This is expected: remember, we set the DryRun = True flag in the function. You will see however, that it would have run successfully had we not set that. If this event had run live, you could go and look at the VPC configuration, and notice that the Internet Gateway created by the CloudFormation VPC stack has been detached from the VPC.","title":"Testing our setup!"},{"location":"scenario1/#summary","text":"Control of network traffic flow to many compliance frameworks. This is one example of a way you can use different AWS services to monitor that flow. In our next lab, we'll look at using drift detection in CloudFormation to monitor ports/protocols allowed to a given group of hosts. To clean up, please remember to do the following tasks: Remove the CloudFormation stacks we created - the Lambda function, and the new VPC. Be careful to only delete what we created Remove the CloudTrail we created as a part of this lab - be careful not to disturb any others you may have Remove the CloudWatch Events rule we created Remove the CloudWatch Logs groups created by Lambda and CloudTrail Remove the S3 bucket that was created by CloudTrail to store the logs from this trail This should remove all artifacts of this lab.","title":"Summary"},{"location":"scenario2/","text":"Scenario 2 - Drift Detection As public sector customers continue to adopt cloud, the hard work they have done with building secure and compliant architectures must be continuously monitored. Many compliance frameworks mandate this, such as NIST 800-53. CM-7 (a/b) define the need to identify and block ports that are not relavent to the application. As the application operates, ongoing continous monitoring is vital. Organizations must define a plan to perform this monitoring and ongoing auditing. What if you could define these rules, and get an automated notification if the rules change? Instead of trying to track down a rogue user or mistaken administrator, you can quickly be notified of changes, and potentially revert them automatically. We've already used CloudFormation in Scenario 1 to deploy our resources, and will deploy our resources for this lab with it as well. One new feature of CloudFormation is Drift Detection. Drift is the difference between the expected configuration values of stack resources defined in CloudFormation templates and the actual configuration values of these resources in the corresponding CloudFormation stacks. This allows you to better manage your CloudFormation stacks and ensure consistency in your resource configurations. Pre-requisites You'll need: An AWS account that you can create CloudFormation stacks in Make sure this account is one that creating/deleting resources like this won't trip any alarms! Here's a high level graphic of what we're attempting to do: We have a security group that is gating access to our hosts. The rules are specific to ports 22 and 3389 for remote administration only. The security group is configured only to allow a specific IP address. We need to ensure that this security group is not modified except via valid configuration management process. If it is, we want to know about it so that we can be sure only hosts that we want to have access can hit our bastion host group. PLEASE BE SURE TO USE OREGON (US-WEST-2) FOR THIS LAB! You can double check this by looking in the upper right hand corner for the region selection dropdown. Deploy the CloudFormation stack. First, let's deploy the stack that will provide the base for this lab. The CloudFormation stack will deploy a VPC with no resources or attachments in it. We need a VPC to associate a security group with. It will then deploy a security group that has two rules - one for RDP and one for SSH locked to a given IP. Launch the CloudFormation console, and create a new stack. Click Create Stack Specify Amazon S3 as the location for the CloudFormation template, then click next. ( https://reinforce2019-grc333-session.s3-us-west-2.amazonaws.com/security-group.yaml) Provide a stack name, and edit the VPC name if you desire. Configure any stack options/tagging you wish to set. Click Next. Review the stack details, then click Next when you are satisfied. Change the Security Group In order to see how CloudFormation Drift Detection works, we need to introduce a change to our security group the CloudFormation stack has created. Open the EC2 console, and look for Security Groups on the left hand side under Network & Security. Click Security Groups, and find the Security Group created by CloudFormation. It will be prefixed by the CloudFormation stack name, followed by a unique identifier. Once you click the Security Group, a menu below will appear. Click the Inbound tab, and review the rules there. Notice the rules are set to only allow a single host. Click the Edit button so we can adjust the rule to deviate from the stack as it was deployed. Once you click edit, choose one of the rules, and change the Source to Anywhere. This will open this Security Group to allow ALL destinations on the port specified. Click Save. You should see the rule update in the Inbound tab. You may also see a \"::/O\" rule show up - this is an IPv6 rule that can be ignored. Detect Drift Now that a change has been made, let's see how CloudFormation can help us detect this. Launch the CloudFormation console, and find the stack we created for the Security Group. Click Stack Actions, and View Drift Results. This will show the drift status for the stack. As you can see, we haven't run drift detection yet, so it will indicate NOT_CHECKED . Click the button \"Detect stack drift\". This will start drift detection. Click the refresh button next to the \"Detect stack drift\" button. You will see the Resource drift status update, and the Security Group marked as MODIFIED . Select the radio button next to the Security Group, and click \"View drift details\". Notice the detected drift items. When changing the Source in the Security Group to All, the Security Group changed the CidrIp of the rule. This is indicated by the REMOVE of the expected IP address, and the ADD of the new ingress rule. You can also see the changes reflected in the JSON in the Details pane of the screen. Summary In this lab we created some resources using CloudFormation using an Infrastructure as Code pattern. We modified that stack by changing the IP in one of the rules. Once we ran CloudFormation Drift detection, we saw the changes highlighted as a variance from the stack that was originally deployed. These stack changes can be tracked and alerted on so that compliance and security teams can programatically detect and react to changes that are unauthorized or done without going through the proper change control process. To clean up from this lab, delete the CloudFormation stack we created earlier.","title":"Scenario 2 - Drift Detection"},{"location":"scenario2/#scenario-2-drift-detection","text":"As public sector customers continue to adopt cloud, the hard work they have done with building secure and compliant architectures must be continuously monitored. Many compliance frameworks mandate this, such as NIST 800-53. CM-7 (a/b) define the need to identify and block ports that are not relavent to the application. As the application operates, ongoing continous monitoring is vital. Organizations must define a plan to perform this monitoring and ongoing auditing. What if you could define these rules, and get an automated notification if the rules change? Instead of trying to track down a rogue user or mistaken administrator, you can quickly be notified of changes, and potentially revert them automatically. We've already used CloudFormation in Scenario 1 to deploy our resources, and will deploy our resources for this lab with it as well. One new feature of CloudFormation is Drift Detection. Drift is the difference between the expected configuration values of stack resources defined in CloudFormation templates and the actual configuration values of these resources in the corresponding CloudFormation stacks. This allows you to better manage your CloudFormation stacks and ensure consistency in your resource configurations.","title":"Scenario 2 - Drift Detection"},{"location":"scenario2/#pre-requisites","text":"You'll need: An AWS account that you can create CloudFormation stacks in Make sure this account is one that creating/deleting resources like this won't trip any alarms! Here's a high level graphic of what we're attempting to do: We have a security group that is gating access to our hosts. The rules are specific to ports 22 and 3389 for remote administration only. The security group is configured only to allow a specific IP address. We need to ensure that this security group is not modified except via valid configuration management process. If it is, we want to know about it so that we can be sure only hosts that we want to have access can hit our bastion host group. PLEASE BE SURE TO USE OREGON (US-WEST-2) FOR THIS LAB! You can double check this by looking in the upper right hand corner for the region selection dropdown.","title":"Pre-requisites"},{"location":"scenario2/#deploy-the-cloudformation-stack","text":"First, let's deploy the stack that will provide the base for this lab. The CloudFormation stack will deploy a VPC with no resources or attachments in it. We need a VPC to associate a security group with. It will then deploy a security group that has two rules - one for RDP and one for SSH locked to a given IP. Launch the CloudFormation console, and create a new stack. Click Create Stack Specify Amazon S3 as the location for the CloudFormation template, then click next. ( https://reinforce2019-grc333-session.s3-us-west-2.amazonaws.com/security-group.yaml) Provide a stack name, and edit the VPC name if you desire. Configure any stack options/tagging you wish to set. Click Next. Review the stack details, then click Next when you are satisfied.","title":"Deploy the CloudFormation stack."},{"location":"scenario2/#change-the-security-group","text":"In order to see how CloudFormation Drift Detection works, we need to introduce a change to our security group the CloudFormation stack has created. Open the EC2 console, and look for Security Groups on the left hand side under Network & Security. Click Security Groups, and find the Security Group created by CloudFormation. It will be prefixed by the CloudFormation stack name, followed by a unique identifier. Once you click the Security Group, a menu below will appear. Click the Inbound tab, and review the rules there. Notice the rules are set to only allow a single host. Click the Edit button so we can adjust the rule to deviate from the stack as it was deployed. Once you click edit, choose one of the rules, and change the Source to Anywhere. This will open this Security Group to allow ALL destinations on the port specified. Click Save. You should see the rule update in the Inbound tab. You may also see a \"::/O\" rule show up - this is an IPv6 rule that can be ignored.","title":"Change the Security Group"},{"location":"scenario2/#detect-drift","text":"Now that a change has been made, let's see how CloudFormation can help us detect this. Launch the CloudFormation console, and find the stack we created for the Security Group. Click Stack Actions, and View Drift Results. This will show the drift status for the stack. As you can see, we haven't run drift detection yet, so it will indicate NOT_CHECKED . Click the button \"Detect stack drift\". This will start drift detection. Click the refresh button next to the \"Detect stack drift\" button. You will see the Resource drift status update, and the Security Group marked as MODIFIED . Select the radio button next to the Security Group, and click \"View drift details\". Notice the detected drift items. When changing the Source in the Security Group to All, the Security Group changed the CidrIp of the rule. This is indicated by the REMOVE of the expected IP address, and the ADD of the new ingress rule. You can also see the changes reflected in the JSON in the Details pane of the screen.","title":"Detect Drift"},{"location":"scenario2/#summary","text":"In this lab we created some resources using CloudFormation using an Infrastructure as Code pattern. We modified that stack by changing the IP in one of the rules. Once we ran CloudFormation Drift detection, we saw the changes highlighted as a variance from the stack that was originally deployed. These stack changes can be tracked and alerted on so that compliance and security teams can programatically detect and react to changes that are unauthorized or done without going through the proper change control process. To clean up from this lab, delete the CloudFormation stack we created earlier.","title":"Summary"},{"location":"scenario3/","text":"GuardDuty - Continuous Monitoring of Cloud Security Amazon GuardDuty is a threat detection service that continuously monitors for malicious activity and unauthorized behavior to protect your AWS accounts and workloads. With the cloud, the collection and aggregation of account and network activities is simplified, but it can be time consuming for security teams to continuously analyze event log data for potential threats. With GuardDuty, you now have an intelligent and cost-effective option for continuous threat detection in the AWS Cloud. The service uses machine learning, anomaly detection, and integrated threat intelligence to identify and prioritize potential threats. GuardDuty analyzes tens of billions of events across multiple AWS data sources, such as AWS CloudTrail, Amazon VPC Flow Logs, and DNS logs. With a few clicks in the AWS Management Console, GuardDuty can be enabled with no software or hardware to deploy or maintain. Many control families require automated mechanisms to assist in the tracking of security incidents and in the collection and analysis of incident information. See NIST IR-5(1), CIS 3.1. By integrating with AWS CloudWatch Events, GuardDuty alerts are actionable, easy to aggregate across multiple accounts, and straightforward to push into existing event management and workflow systems. Pre-requisites You'll need: An AWS account that you can create CloudFormation stacks in Make sure this account is one that creating/deleting resources like this won't trip any alarms! Here's a high level graphic of what GuardDuty ingests to provide us with situational awareness. In this lab, we'll be looking at sample findings and using CloudWatch to provide us with alerts of any security events. Similar to Scenario 1, you could use Lambda to react automatically to these events. PLEASE BE SURE TO USE OREGON (US-WEST-2) FOR THIS LAB! You can double check this by looking in the upper right hand corner for the region selection dropdown. Activate GuardDuty First, we need to turn on GuardDuty. By default it is turned off. In the AWS Console, search for GuardDuty, and click on it. When you first configure GuardDuty, you will be presented the option to Enable GuardDuty, and view the IAM role needed to operate it. You can view the IAM role needed for the service by clicking View service role permissions. Once you're happy with the role, click Enable GuardDuty to get it started. Initially there will be no findings available. We will generate sample findings in order to see how the tool functions. Prior to that however, click settings in the left hand menu to see some configuration options for GuardDuty. From here you can configure CloudWatch events integration, generate sample findings, and see what the GuardDuty free trial will cost after the 30 day trial period. Set up SNS Topic We want to set up an SNS topic so that the GuardDuty findings that are sent to CloudWatch Events have a place to go. Amazon Simple Notification Service (SNS) is a highly available, durable, secure, fully managed pub/sub messaging service that enables you to decouple microservices, distributed systems, and serverless applications. Amazon SNS provides topics for high-throughput, push-based, many-to-many messaging. Using Amazon SNS topics, your publisher systems can fan out messages to a large number of subscriber endpoints for parallel processing, including Amazon SQS queues, AWS Lambda functions, and HTTP/S webhooks. Additionally, SNS can be used to fan out notifications to end users using mobile push, SMS, and email. Go to the console, and find SNS. Pick a topic name, and click Next step. Flesh out the details of the topic, then continue. Once the topic is created, you'll want to create a subscription. Click the create subscription button, and pick a notification method. In this example I've chosen to use email notification of my GuardDuty findings. Configure CloudWatch Events rule Once an SNS topic is configured, we need to confiugre a CloudWatch Events rule to send findings to our new topic. Open CloudWatch in the console, and look for CloudWatch Events, and click Rules. Create a new rule to take in our GuardDuty events. Make sure event pattern is selected, and GuardDuty finding are selected. Select as a target our SNS topic we created earlier. Finish up creation of the rule. Test GuardDuty with sample findings Next, we will generate sample findings to see what kinds of alerts GuardDuty generates. Go back to GuardDuty in the AWS console, and select Settings, and look for Generate Sample Findings. Once you've clicked the button, head back to the main GuardDuty console to review the findings created. Note the differing severities, and types there. Since we have generated Sample findings, we will not get email alerts on our CloudWatch rule. As an exercise, look at the sample findings and think about how you might remediate these, and ways you can prevent them from happening. Cleanup To clean up this lab: Delete the CloudWatch Events rule we created Disable GuardDuty in GuardDuty/settings.","title":"Scenario 3 - GuardDuty"},{"location":"scenario3/#guardduty-continuous-monitoring-of-cloud-security","text":"Amazon GuardDuty is a threat detection service that continuously monitors for malicious activity and unauthorized behavior to protect your AWS accounts and workloads. With the cloud, the collection and aggregation of account and network activities is simplified, but it can be time consuming for security teams to continuously analyze event log data for potential threats. With GuardDuty, you now have an intelligent and cost-effective option for continuous threat detection in the AWS Cloud. The service uses machine learning, anomaly detection, and integrated threat intelligence to identify and prioritize potential threats. GuardDuty analyzes tens of billions of events across multiple AWS data sources, such as AWS CloudTrail, Amazon VPC Flow Logs, and DNS logs. With a few clicks in the AWS Management Console, GuardDuty can be enabled with no software or hardware to deploy or maintain. Many control families require automated mechanisms to assist in the tracking of security incidents and in the collection and analysis of incident information. See NIST IR-5(1), CIS 3.1. By integrating with AWS CloudWatch Events, GuardDuty alerts are actionable, easy to aggregate across multiple accounts, and straightforward to push into existing event management and workflow systems.","title":"GuardDuty - Continuous Monitoring of Cloud Security"},{"location":"scenario3/#pre-requisites","text":"You'll need: An AWS account that you can create CloudFormation stacks in Make sure this account is one that creating/deleting resources like this won't trip any alarms! Here's a high level graphic of what GuardDuty ingests to provide us with situational awareness. In this lab, we'll be looking at sample findings and using CloudWatch to provide us with alerts of any security events. Similar to Scenario 1, you could use Lambda to react automatically to these events. PLEASE BE SURE TO USE OREGON (US-WEST-2) FOR THIS LAB! You can double check this by looking in the upper right hand corner for the region selection dropdown.","title":"Pre-requisites"},{"location":"scenario3/#activate-guardduty","text":"First, we need to turn on GuardDuty. By default it is turned off. In the AWS Console, search for GuardDuty, and click on it. When you first configure GuardDuty, you will be presented the option to Enable GuardDuty, and view the IAM role needed to operate it. You can view the IAM role needed for the service by clicking View service role permissions. Once you're happy with the role, click Enable GuardDuty to get it started. Initially there will be no findings available. We will generate sample findings in order to see how the tool functions. Prior to that however, click settings in the left hand menu to see some configuration options for GuardDuty. From here you can configure CloudWatch events integration, generate sample findings, and see what the GuardDuty free trial will cost after the 30 day trial period.","title":"Activate GuardDuty"},{"location":"scenario3/#set-up-sns-topic","text":"We want to set up an SNS topic so that the GuardDuty findings that are sent to CloudWatch Events have a place to go. Amazon Simple Notification Service (SNS) is a highly available, durable, secure, fully managed pub/sub messaging service that enables you to decouple microservices, distributed systems, and serverless applications. Amazon SNS provides topics for high-throughput, push-based, many-to-many messaging. Using Amazon SNS topics, your publisher systems can fan out messages to a large number of subscriber endpoints for parallel processing, including Amazon SQS queues, AWS Lambda functions, and HTTP/S webhooks. Additionally, SNS can be used to fan out notifications to end users using mobile push, SMS, and email. Go to the console, and find SNS. Pick a topic name, and click Next step. Flesh out the details of the topic, then continue. Once the topic is created, you'll want to create a subscription. Click the create subscription button, and pick a notification method. In this example I've chosen to use email notification of my GuardDuty findings.","title":"Set up SNS Topic"},{"location":"scenario3/#configure-cloudwatch-events-rule","text":"Once an SNS topic is configured, we need to confiugre a CloudWatch Events rule to send findings to our new topic. Open CloudWatch in the console, and look for CloudWatch Events, and click Rules. Create a new rule to take in our GuardDuty events. Make sure event pattern is selected, and GuardDuty finding are selected. Select as a target our SNS topic we created earlier. Finish up creation of the rule.","title":"Configure CloudWatch Events rule"},{"location":"scenario3/#test-guardduty-with-sample-findings","text":"Next, we will generate sample findings to see what kinds of alerts GuardDuty generates. Go back to GuardDuty in the AWS console, and select Settings, and look for Generate Sample Findings. Once you've clicked the button, head back to the main GuardDuty console to review the findings created. Note the differing severities, and types there. Since we have generated Sample findings, we will not get email alerts on our CloudWatch rule. As an exercise, look at the sample findings and think about how you might remediate these, and ways you can prevent them from happening.","title":"Test GuardDuty with sample findings"},{"location":"scenario3/#cleanup","text":"To clean up this lab: Delete the CloudWatch Events rule we created Disable GuardDuty in GuardDuty/settings.","title":"Cleanup"}]}